/*
 Copyright 2015 eBusiness Information
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
/**
 * Module dependencies.
 */

var app = require('../app');
var Conf = require('../conf/conf');
var debug = require('debug')('mbt:server');
var http = require('http');
var cluster = require('cluster');
var numCPUs = require('os').cpus().length;
var mbTilesGeneratorService = require('../service/mbtiles-generator-service');
var EventEmitter = require('events');
var emitter = new EventEmitter();

var workers = [];

var FOUR_HOURS = 4 * 3600 * 1000;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '2999');
var env = process.env.NODE_ENV || 'development';
app.set('port', port);
app.set('env', env);


if (cluster.isMaster) {
  
  // Fork workers.
  for (var i = 0; i < numCPUs; i++) {
    var worker = cluster.fork();
    workers[i] = worker;
    // Listen to messages on workers
    worker.on('message', function (msg) {
      // MBTiles status dispatch to workers
      if (msg.tag === 'mbtiles-status-broadcast') {
        debug('Received message from master: ' + JSON.stringify(msg));
        workers.forEach(function (w) {
          msg.tag = 'mbtiles-status-push';
          w.send(msg);
        });
      }
    });
  }

  // We are in server-mode. Therefore, we will clear the data directory every 24 hours
  setInterval(function() {
    mbTilesGeneratorService.removeOldMBTiles();
  }, FOUR_HOURS);

  cluster.on('listening', function (worker, address) {
    debug('PID(' + worker.process.pid + ') Cluster worker now connected');
  });

  cluster.on('exit', function (worker, code, signal) {
    console.log('worker ' + worker.process.pid + ' died');
  });

  console.log('Application is running, connected to endpoint ' + Conf.tileServer.endpoint + '. Pretty cool huh?');

} else {
  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
  server.setTimeout(Conf.timeout);

}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      console.error('Error occured: ' + error);
    //throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {

}
